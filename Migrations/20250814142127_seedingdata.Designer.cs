// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SURE_Store_API.Data;

#nullable disable

namespace SURE_Store_API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250814142127_seedingdata")]
    partial class seedingdata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SURE_Store_API.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("SURE_Store_API.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("SURE_Store_API.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("SURE_Store_API.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Devices and gadgets",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Apparel and accessories",
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Literature and educational materials",
                            Name = "Books"
                        });
                });

            modelBuilder.Entity("SURE_Store_API.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("SURE_Store_API.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("SURE_Store_API.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Latest Apple smartphone",
                            ImageUrl = "https://example.com/iphone15.jpg",
                            Name = "iPhone 15",
                            Price = 999.99m,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Latest Samsung smartphone",
                            ImageUrl = "https://example.com/galaxys23.jpg",
                            Name = "Samsung Galaxy S23",
                            Price = 899.99m,
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Noise-cancelling headphones",
                            ImageUrl = "https://example.com/sonyheadphones.jpg",
                            Name = "Sony WH-1000XM5",
                            Price = 349.99m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "Comfortable running shoes",
                            ImageUrl = "https://example.com/nikeairmax.jpg",
                            Name = "Nike Air Max",
                            Price = 129.99m,
                            StockQuantity = 200
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Description = "High-performance running shoes",
                            ImageUrl = "https://example.com/adidasultraboost.jpg",
                            Name = "Adidas Ultraboost",
                            Price = 159.99m,
                            StockQuantity = 150
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "Classic denim jeans",
                            ImageUrl = "https://example.com/levisjeans.jpg",
                            Name = "Levi's Jeans",
                            Price = 59.99m,
                            StockQuantity = 300
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            Description = "Classic novel by F. Scott Fitzgerald",
                            ImageUrl = "https://example.com/greatgatsby.jpg",
                            Name = "The Great Gatsby",
                            Price = 10.99m,
                            StockQuantity = 500
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            Description = "Dystopian novel about totalitarianism",
                            ImageUrl = "https://example.com/1984.jpg",
                            Name = "1984 by George Orwell",
                            Price = 12.99m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            Description = "Classic novel by Harper Lee",
                            ImageUrl = "https://example.com/tokillamockingbird.jpg",
                            Name = "To Kill a Mockingbird",
                            Price = 14.99m,
                            StockQuantity = 350
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            Description = "Novel by J.D. Salinger",
                            ImageUrl = "https://example.com/catcherintherye.jpg",
                            Name = "The Catcher in the Rye",
                            Price = 11.99m,
                            StockQuantity = 450
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            Description = "Apple's high-performance laptop",
                            ImageUrl = "https://example.com/macbookpro.jpg",
                            Name = "MacBook Pro",
                            Price = 1999.99m,
                            StockQuantity = 20
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            Description = "Compact and powerful laptop",
                            ImageUrl = "https://example.com/dellxps13.jpg",
                            Name = "Dell XPS 13",
                            Price = 1299.99m,
                            StockQuantity = 25
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 1,
                            Description = "Wireless noise-cancelling headphones",
                            ImageUrl = "https://example.com/boseqc35.jpg",
                            Name = "Bose QuietComfort 35 II",
                            Price = 299.99m,
                            StockQuantity = 80
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 1,
                            Description = "Professional mirrorless camera",
                            ImageUrl = "https://example.com/canoneosr5.jpg",
                            Name = "Canon EOS R5",
                            Price = 3899.99m,
                            StockQuantity = 15
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 1,
                            Description = "Full-frame mirrorless camera",
                            ImageUrl = "https://example.com/sonya7iii.jpg",
                            Name = "Sony A7 III",
                            Price = 1999.99m,
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 1,
                            Description = "Advanced fitness tracker with GPS",
                            ImageUrl = "https://example.com/fitbitcharge5.jpg",
                            Name = "Fitbit Charge 5",
                            Price = 149.99m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 1,
                            Description = "Premium Android tablet with S Pen support",
                            ImageUrl = "https://example.com/galaxytabs8.jpg",
                            Name = "Samsung Galaxy Tab S8",
                            Price = 699.99m,
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 1,
                            Description = "Smartwatch with health tracking features",
                            ImageUrl = "https://example.com/applewatchseries7.jpg",
                            Name = "Apple Watch Series 7",
                            Price = 399.99m,
                            StockQuantity = 60
                        });
                });

            modelBuilder.Entity("SURE_Store_API.Models.Cart", b =>
                {
                    b.HasOne("SURE_Store_API.Models.ApplicationUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("SURE_Store_API.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SURE_Store_API.Models.CartItem", b =>
                {
                    b.HasOne("SURE_Store_API.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SURE_Store_API.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SURE_Store_API.Models.Order", b =>
                {
                    b.HasOne("SURE_Store_API.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SURE_Store_API.Models.OrderItem", b =>
                {
                    b.HasOne("SURE_Store_API.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SURE_Store_API.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SURE_Store_API.Models.Product", b =>
                {
                    b.HasOne("SURE_Store_API.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SURE_Store_API.Models.ApplicationUser", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SURE_Store_API.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("SURE_Store_API.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SURE_Store_API.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SURE_Store_API.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
